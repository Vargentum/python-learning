1. Створити і активувати середовище
2. `pip install -r requirements.txt`
3. `cd blogproject`

Це дуже простенький блог, який ми частково реалізували на занятті. Розглянемо його файлову структуру:

├── blogproject                       <-- тут знаходиться конфігурація проекту
│   ├── __init__.py
│   ├── settings
│   │   ├── base.py                   <-- налаштування проекту
│   │   └── production.example.py
│   ├── urls.py                       <-- головний URL-диспетчер проекту
│   └── wsgi.py
├── common                            <-- апка; тут можна складати різні утиліти
│   ├── context_processors.py
│   └── __init__.py
├── locale                            <-- тут зберігаються переклади рядків з англійської
│   └── uk
│       └── LC_MESSAGES
│           ├── django.mo
│           └── django.po
├── manage.py                         <-- пульт керування django
├── pages                             <-- апка; тут можна зберігати прості сторінки без потреби доступу до бази, etc.
│   ├── __init__.py
│   ├── templates
│   │   └── pages
│   │       └── index.html
│   └── urls.py
├── posts                             <-- апка з головним функціоналом — пости в блозі
│   ├── admin.py                      <-- реєстрація моделей в адмінці django
│   ├── apps.py                       <-- конфігурація апки. додана, щоб локалізувати (перекласти назву) в адмінці
│   ├── fixtures                      <-- початкові дані для бази даних
│   │   └── initial_data.json
│   ├── __init__.py
│   ├── migrations                    <-- міграції
│   │   ├── 0001_initial.py
│   │   └── __init__.py
│   ├── models.py                     <-- моделі — запис і категорія
│   ├── templates
│   │   └── posts
│   │       ├── post_confirm_delete.html  <- шаблон підтвердження видалення запису
│   │       ├── post_detail.html          <- шаблон перегляду запису
│   │       ├── post_form.html            <- шаблон створення і редагування запису
│   │       └── post_list.html            <- шаблон списку
│   ├── tests.py                      <-- тести
│   ├── urls.py                       <-- url-диспетчер
│   └── views.py                      <-- в’юшки
└── templates                         <-- загальні шаблони для всіх апок проекту
    ├── base.html                     <-- базовий шаблон, з якого наслідуються всі інші
    └── includes
        ├── form.html                 <-- форма редагування
        └── navbar.html               <-- верхня навігаційна панель

4. Ознайомтеся з проектом, почитайте код і шаблони

Цей проект локалізований. Зверніть увагу на функцію gettext, якій за традицією присвоюють псевдонім `_`
`_('Some text')` – повертає локалізований текст. Вона шукає у файлах локалізації (тут locale/uk/django.po)
рядок 'Some text', знаходить переклад, якщо він там є, і повертає його.

В шаблонах цій функції відповідає тег {% trans 'Some text' %}

5. Запустіть
   ```
   ./manage.py migrate

   # Завантаження початкових даних в базу
   ./manage.py loaddata posts/fixtures/initial_data.json

   # Створення акаунта адміністратора
   ./manage.py createsuperuser

   ./manage.py runserver
   ```
6. Зайдіть в адмінку, поклацайте: /admin
7. Поклацайте блог: /blog
8. Додайте категорії в posts

В’юшки та моделі уже додані – їх треба тільки розкоментувати. Лишилось додати тільки відповідні шаблони. Візміть за приклад post_detail.html і
post_list.html (тільки тут простіше — не треба сторінок).

Нагадування API:
Нехай є дві моделі, Category і Entry, які відносяться один-до-багатьох:
```
class Category(Model):
    # whatever

class Entry(Model):
    category = ForeignKey(A)
```

Тоді якщо є об’єкт Category:
```
some_category = Category.objects.get(pk=42)
```
То доступитися до всіх Entry, які на нього посилаються, можна так:
```
some_category.entry_set.all()
```

9. ...
10. PROFIT!


